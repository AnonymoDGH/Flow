```python
import numpy as np
import time

print("="*60)
print("FLOW ML BENCHMARK - 1000 ARCHIVOS")
print("="*60)

start_total = time.time()

np.random.seed(42)
file_data = []

for i in range(1000):
    file_size = np.random.randint(1000, 50000000)
    file_age_days = np.random.randint(1, 1095)
    access_count = np.random.randint(0, 500)
    is_encrypted = 1 if np.random.random() > 0.85 else 0
    file_type = np.random.choice([0, 1, 2, 3, 4])
    
    file_data.append([
        file_size / 1000000,
        file_age_days / 365,
        access_count / 100,
        is_encrypted,
        file_type / 4
    ])

X = np.array(file_data)
y = np.random.choice([0, 1], size=1000, p=[0.75, 0.25])

print(f"Datos generados: {X.shape}")
print(f"Entrenando modelo...")

def sigmoid(z):
    return 1 / (1 + np.exp(-np.clip(z, -500, 500)))

np.random.seed(123)
weights = np.random.randn(X.shape[1]) * 0.01
bias = 0
learning_rate = 0.1
epochs = 200

for epoch in range(epochs):
    z = np.dot(X, weights) + bias
    predictions = sigmoid(z)
    error = predictions - y
    weights -= learning_rate * np.dot(X.T, error) / len(y)
    bias -= learning_rate * np.sum(error) / len(y)

final_predictions = sigmoid(np.dot(X, weights) + bias)
predicted_classes = (final_predictions > 0.5).astype(int)
accuracy = np.mean(predicted_classes == y)

total_time = time.time() - start_total

print(f"\nPrecisi√≥n: {accuracy*100:.2f}%")
print(f"Sospechosos detectados: {np.sum(predicted_classes)}/1000")
print(f"Tiempo total: {total_time:.3f}s")
print(f"Velocidad: {1000/total_time:.0f} archivos/segundo")
print(f"Throughput: {1000*epochs/total_time:.0f} ops/segundo")
print("\n" + "="*60)
```
