```python
import numpy as np
import matplotlib.pyplot as plt
import time

print("="*60)
print("FLOW AI - GENERADOR DE IMAGENES DESDE TEXTO")
print("Escribe lo que quieres y la IA lo dibuja pixel por pixel")
print("="*60)

# Configuraci칩n
IMG_SIZE = 32
LATENT_DIM = 16

# Diccionario de conceptos que la IA puede aprender
CONCEPTS = {
    'perro': 0,
    'gato': 1,
    'casa': 2,
    'arbol': 3,
    'carro': 4,
    'persona': 5,
    'sol': 6,
    'luna': 7
}

# Generar im치genes objetivo simplificadas
def generate_target_image(concept_id):
    img = np.zeros((IMG_SIZE, IMG_SIZE))
    
    if concept_id == 0:  # Perro
        # Cuerpo
        img[15:25, 10:22] = 0.8
        # Cabeza
        img[10:18, 18:26] = 0.9
        # Orejas
        img[8:12, 18:21] = 0.7
        img[8:12, 23:26] = 0.7
        # Patas
        img[24:30, 11:14] = 0.6
        img[24:30, 19:22] = 0.6
        # Cola
        img[16:22, 8:11] = 0.5
        
    elif concept_id == 1:  # Gato
        # Cuerpo
        img[16:24, 12:20] = 0.8
        # Cabeza
        img[12:18, 14:22] = 0.9
        # Orejas puntiagudas
        img[9:13, 14:17] = 0.7
        img[9:13, 19:22] = 0.7
        # Patas
        img[23:29, 13:15] = 0.6
        img[23:29, 17:19] = 0.6
        # Cola curva
        img[18:26, 8:11] = 0.5
        img[14:19, 8:12] = 0.5
        
    elif concept_id == 2:  # Casa
        # Base
        img[18:30, 8:24] = 0.8
        # Techo
        for i in range(8):
            img[10+i, 8+i:24-i] = 0.9
        # Puerta
        img[22:30, 14:18] = 0.3
        # Ventanas
        img[20:24, 10:13] = 0.4
        img[20:24, 19:22] = 0.4
        
    elif concept_id == 3:  # Arbol
        # Tronco
        img[20:30, 14:18] = 0.6
        # Copa
        for i in range(12):
            width = 6 - abs(i - 6)
            center = 16
            img[8+i, center-width:center+width] = 0.8
        
    elif concept_id == 4:  # Carro
        # Cuerpo
        img[18:26, 8:24] = 0.7
        # Techo
        img[14:19, 11:21] = 0.8
        # Ruedas
        img[24:28, 10:14] = 0.3
        img[24:28, 18:22] = 0.3
        # Ventanas
        img[15:18, 12:15] = 0.5
        img[15:18, 17:20] = 0.5
        
    elif concept_id == 5:  # Persona
        # Cabeza
        img[8:14, 13:19] = 0.9
        # Cuerpo
        img[14:24, 12:20] = 0.8
        # Brazos
        img[16:22, 8:13] = 0.7
        img[16:22, 19:24] = 0.7
        # Piernas
        img[23:30, 12:15] = 0.6
        img[23:30, 17:20] = 0.6
        
    elif concept_id == 6:  # Sol
        # Circulo central
        radius = 8
        cx, cy = 16, 16
        y, x = np.ogrid[:IMG_SIZE, :IMG_SIZE]
        mask = (x - cx)**2 + (y - cy)**2 <= radius**2
        img[mask] = 1.0
        # Rayos
        for angle in range(0, 360, 45):
            rad = np.radians(angle)
            for r in range(10, 15):
                px = int(cx + r * np.cos(rad))
                py = int(cy + r * np.sin(rad))
                if 0 <= px < IMG_SIZE and 0 <= py < IMG_SIZE:
                    img[py, px] = 0.8
                    
    elif concept_id == 7:  # Luna
        # Circulo
        radius = 9
        cx, cy = 16, 16
        y, x = np.ogrid[:IMG_SIZE, :IMG_SIZE]
        mask = (x - cx)**2 + (y - cy)**2 <= radius**2
        img[mask] = 0.9
        # Crateres
        img[12:15, 14:17] = 0.6
        img[18:20, 18:20] = 0.6
        img[14:16, 20:22] = 0.6
    
    # Agregar ruido suave
    noise = np.random.normal(0, 0.05, (IMG_SIZE, IMG_SIZE))
    img = np.clip(img + noise, 0, 1)
    
    return img.flatten()

# Red neuronal generativa
class TextToImageGenerator:
    def __init__(self):
        # Encoder: texto -> latent space
        self.W_enc1 = np.random.randn(len(CONCEPTS), 64) * 0.1
        self.b_enc1 = np.zeros((1, 64))
        self.W_enc2 = np.random.randn(64, LATENT_DIM) * 0.1
        self.b_enc2 = np.zeros((1, LATENT_DIM))
        
        # Decoder: latent + posicion -> pixel
        decoder_input = LATENT_DIM + 2  # latent + (x, y)
        self.W_dec1 = np.random.randn(decoder_input, 128) * 0.1
        self.b_dec1 = np.zeros((1, 128))
        self.W_dec2 = np.random.randn(128, 64) * 0.1
        self.b_dec2 = np.zeros((1, 64))
        self.W_dec3 = np.random.randn(64, 1) * 0.1
        self.b_dec3 = np.zeros((1, 1))
        
    def relu(self, x):
        return np.maximum(0, x)
    
    def sigmoid(self, x):
        return 1 / (1 + np.exp(-np.clip(x, -500, 500)))
    
    def encode(self, concept_onehot):
        z1 = np.dot(concept_onehot, self.W_enc1) + self.b_enc1
        a1 = self.relu(z1)
        z2 = np.dot(a1, self.W_enc2) + self.b_enc2
        latent = self.relu(z2)
        return latent
    
    def decode(self, latent, x, y):
        # Combinar latent con posici칩n
        input_vec = np.concatenate([latent, [[x, y]]], axis=1)
        
        z1 = np.dot(input_vec, self.W_dec1) + self.b_dec1
        a1 = self.relu(z1)
        z2 = np.dot(a1, self.W_dec2) + self.b_dec2
        a2 = self.relu(z2)
        z3 = np.dot(a2, self.W_dec3) + self.b_dec3
        pixel = self.sigmoid(z3)
        return pixel
    
    def generate_image(self, concept_name):
        """Genera imagen pixel por pixel desde texto"""
        if concept_name not in CONCEPTS:
            print(f"Concepto '{concept_name}' no conocido. Usando 'perro'.")
            concept_name = 'perro'
        
        concept_id = CONCEPTS[concept_name]
        concept_onehot = np.zeros((1, len(CONCEPTS)))
        concept_onehot[0, concept_id] = 1
        
        # Encode texto a latent space
        latent = self.encode(concept_onehot)
        
        # Decode pixel por pixel
        img = np.zeros((IMG_SIZE, IMG_SIZE))
        for y in range(IMG_SIZE):
            for x in range(IMG_SIZE):
                x_norm = x / IMG_SIZE
                y_norm = y / IMG_SIZE
                pixel_value = self.decode(latent, x_norm, y_norm)[0, 0]
                img[y, x] = pixel_value
        
        return img
    
    def train_step(self, concept_id, target_img, learning_rate=0.01):
        """Entrena en una imagen"""
        concept_onehot = np.zeros((1, len(CONCEPTS)))
        concept_onehot[0, concept_id] = 1
        
        latent = self.encode(concept_onehot)
        
        total_loss = 0
        
        # Entrenar en cada pixel
        for y in range(IMG_SIZE):
            for x in range(IMG_SIZE):
                x_norm = x / IMG_SIZE
                y_norm = y / IMG_SIZE
                
                # Forward
                pixel_pred = self.decode(latent, x_norm, y_norm)
                target_pixel = target_img[y * IMG_SIZE + x]
                
                # Loss
                loss = (pixel_pred[0, 0] - target_pixel) ** 2
                total_loss += loss
                
                # Backward (simplificado)
                grad = 2 * (pixel_pred[0, 0] - target_pixel)
                
                # Update decoder
                self.W_dec3 -= learning_rate * grad * 0.001
                self.W_dec2 -= learning_rate * grad * 0.0001
                self.W_dec1 -= learning_rate * grad * 0.00001
        
        return total_loss / (IMG_SIZE * IMG_SIZE)

# Inicializar generador
print("\n[Inicializando generador de imagenes...]")
generator = TextToImageGenerator()

# Entrenar
print("[Entrenando IA con conceptos basicos...]")
print("Conceptos: perro, gato, casa, arbol, carro, persona, sol, luna\n")

EPOCHS = 500
SAMPLES_PER_CONCEPT = 3

losses = []
start_time = time.time()

print("Progreso: ", end="", flush=True)

for epoch in range(1, EPOCHS + 1):
    epoch_loss = 0
    
    # Entrenar en cada concepto
    for concept_id in range(len(CONCEPTS)):
        for _ in range(SAMPLES_PER_CONCEPT):
            target = generate_target_image(concept_id)
            loss = generator.train_step(concept_id, target, learning_rate=0.5)
            epoch_loss += loss
    
    avg_loss = epoch_loss / (len(CONCEPTS) * SAMPLES_PER_CONCEPT)
    losses.append(avg_loss)
    
    if epoch % 50 == 0:
        print(f"{epoch}...", end="", flush=True)

print(" Completado!")

training_time = time.time() - start_time

# Interfaz interactiva
print("\n" + "="*60)
print("GENERADOR LISTO - Escribe lo que quieres ver")
print("="*60)
print("\nConceptos disponibles:")
for i, concept in enumerate(CONCEPTS.keys(), 1):
    print(f"  {i}. {concept}")

print("\nEjemplos de uso:")
print("  - perro")
print("  - gato")
print("  - casa")
print("  - sol")

# Generar ejemplos
print("\n[Generando ejemplos de cada concepto...]")

fig = plt.figure(figsize=(16, 10))
fig.suptitle('Flow AI - Generador de Imagenes desde Texto (Pixel por Pixel)', 
             fontsize=16, fontweight='bold')

concepts_list = list(CONCEPTS.keys())
rows = 3
cols = 3

for idx, concept_name in enumerate(concepts_list):
    ax = plt.subplot(rows, cols, idx + 1)
    
    print(f"  Generando: {concept_name}...", end="", flush=True)
    gen_start = time.time()
    img = generator.generate_image(concept_name)
    gen_time = time.time() - gen_start
    print(f" {gen_time:.2f}s")
    
    ax.imshow(img, cmap='viridis')
    ax.set_title(f'"{concept_name.upper()}"', fontsize=12, fontweight='bold')
    ax.axis('off')

# Gr치fica de loss
ax_loss = plt.subplot(rows, cols, 9)
ax_loss.plot(losses, 'b-', linewidth=2, alpha=0.7)
ax_loss.set_title('Loss durante entrenamiento', fontsize=11, fontweight='bold')
ax_loss.set_xlabel('Epoca')
ax_loss.set_ylabel('Loss (MSE)')
ax_loss.grid(True, alpha=0.3)

plt.tight_layout()

# Guardar
output_file = 'flow_text_to_image_ai.png'
plt.savefig(output_file, dpi=150, bbox_inches='tight')
print(f"\n[Imagen guardada como: {output_file}]")

plt.show()

# Resumen
print("\n" + "="*60)
print("RESUMEN DEL ENTRENAMIENTO")
print("="*60)
print(f"\nTiempo de entrenamiento: {training_time:.2f}s")
print(f"Epocas: {EPOCHS}")
print(f"Conceptos aprendidos: {len(CONCEPTS)}")
print(f"\nLoss inicial: {losses[0]:.6f}")
print(f"Loss final: {losses[-1]:.6f}")
print(f"Mejora: {((losses[0]-losses[-1])/losses[0]*100):.1f}%")
print(f"\nPixeles generados por imagen: {IMG_SIZE * IMG_SIZE}")
print(f"Tiempo promedio por imagen: ~{training_time/(EPOCHS*len(CONCEPTS)*SAMPLES_PER_CONCEPT):.3f}s")

# Demo interactivo
print("\n" + "="*60)
print("DEMO INTERACTIVO")
print("="*60)

while True:
    user_input = input("\nEscribe un concepto (o 'salir' para terminar): ").strip().lower()
    
    if user_input in ['salir', 'exit', 'quit', '']:
        print("\n[Cerrando generador...]")
        break
    
    if user_input in CONCEPTS:
        print(f"\n[Generando '{user_input}' pixel por pixel...]")
        gen_start = time.time()
        img = generator.generate_image(user_input)
        gen_time = time.time() - gen_start
        
        plt.figure(figsize=(6, 6))
        plt.imshow(img, cmap='viridis')
        plt.title(f'Generado: "{user_input.upper()}"', fontsize=14, fontweight='bold')
        plt.axis('off')
        plt.tight_layout()
        plt.show()
        
        print(f"[Generado en {gen_time:.2f}s - {IMG_SIZE*IMG_SIZE} pixeles]")
    else:
        print(f"\n[ERROR] Concepto '{user_input}' no conocido.")
        print("Conceptos disponibles:", ", ".join(CONCEPTS.keys()))

print("\n" + "="*60)
print("Gracias por usar Flow AI!")
print("="*60 + "\n")
```
