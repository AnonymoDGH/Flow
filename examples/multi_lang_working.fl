```python
import numpy as np
import time

print("="*60)
print("FLOW MULTI-LENGUAJE - DEMO FUNCIONAL")
print("="*60)

print("\n[PYTHON] Procesando datos...")
start = time.time()

data = np.random.randn(50000, 20)
mean = np.mean(data, axis=0)
std = np.std(data, axis=0)
normalized = (data - mean) / std

py_time = time.time() - start

print(f"[PYTHON] Procesado: 50,000 muestras")
print(f"[PYTHON] Tiempo: {py_time:.2f}s")
print(f"[PYTHON] Media: {mean[:3]}")

flow_set("py_samples", "50000")
flow_set("py_time", str(py_time))
flow_set("py_mean", str(mean[0]))
```

```javascript
console.log("\n[JAVASCRIPT] Procesando eventos...");
const start = Date.now();

const events = [];
for (let i = 0; i < 30000; i++) {
    events.push({
        id: i,
        value: Math.random() * 100,
        type: ['A', 'B', 'C'][Math.floor(Math.random() * 3)]
    });
}

const total = events.reduce((sum, e) => sum + e.value, 0);
const jsTime = (Date.now() - start) / 1000;

console.log(`[JAVASCRIPT] Procesado: ${events.length} eventos`);
console.log(`[JAVASCRIPT] Tiempo: ${jsTime.toFixed(2)}s`);
console.log(`[JAVASCRIPT] Total: $${total.toFixed(2)}`);

flowSet("js_events", events.length.toString());
flowSet("js_time", jsTime.toString());
flowSet("js_total", total.toFixed(2));
```

```cpp
#include <iostream>
#include <vector>
#include <random>
#include <chrono>

int main() {
    std::cout << "\n[C++] Calculando..." << std::endl;
    auto start = std::chrono::high_resolution_clock::now();
    
    std::mt19937 gen(42);
    std::uniform_real_distribution<> dist(0.0, 1.0);
    
    std::vector<double> data(10000);
    for (auto& val : data) {
        val = dist(gen);
    }
    
    double sum = 0;
    for (int i = 0; i < 1000; i++) {
        for (const auto& val : data) {
            sum += val * val;
        }
    }
    
    auto end = std::chrono::high_resolution_clock::now();
    auto duration = std::chrono::duration_cast<std::chrono::milliseconds>(end - start);
    double cppTime = duration.count() / 1000.0;
    
    std::cout << "[C++] Procesado: 10,000,000 operaciones" << std::endl;
    std::cout << "[C++] Tiempo: " << cppTime << "s" << std::endl;
    std::cout << "[C++] Suma: " << sum << std::endl;
    
    flowSet("cpp_ops", "10000000");
    flowSet("cpp_time", std::to_string(cppTime));
    flowSet("cpp_sum", std::to_string(sum));
    
    return 0;
}
```

```python
print("\n" + "="*60)
print("RESUMEN MULTI-LENGUAJE")
print("="*60)

py_samples = int(flow_get("py_samples", "0"))
py_time = float(flow_get("py_time", "0"))

js_events = int(flow_get("js_events", "0"))
js_time = float(flow_get("js_time", "0"))
js_total = float(flow_get("js_total", "0"))

cpp_ops = int(flow_get("cpp_ops", "0"))
cpp_time = float(flow_get("cpp_time", "0"))

total_time = py_time + js_time + cpp_time

print(f"\n[PYTHON]")
print(f"  Muestras: {py_samples:,}")
print(f"  Tiempo:   {py_time:.2f}s")

print(f"\n[JAVASCRIPT]")
print(f"  Eventos:  {js_events:,}")
print(f"  Total:    ${js_total:,.2f}")
print(f"  Tiempo:   {js_time:.2f}s")

print(f"\n[C++]")
print(f"  Ops:      {cpp_ops:,}")
print(f"  Tiempo:   {cpp_time:.2f}s")

print(f"\n[TOTAL]")
print(f"  Tiempo:   {total_time:.2f}s")
print(f"  Lenguajes: 3 (Python, JavaScript, C++)")
print(f"  Memoria compartida: OK")

print("\n" + "="*60 + "\n")
```
